// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskNote.Models;

namespace TaskNote.Migrations
{
    [DbContext(typeof(TaskNoteContext))]
    [Migration("20191103183903_TaskNote1")]
    partial class TaskNote1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskNote.Models.Contenedor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre");

                    b.Property<Guid>("PizarraId");

                    b.HasKey("ID");

                    b.HasIndex("PizarraId");

                    b.ToTable("Contenedors");
                });

            modelBuilder.Entity("TaskNote.Models.Estilo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Fondo");

                    b.Property<string>("Font");

                    b.Property<Guid>("PizarraId");

                    b.Property<string>("Theme");

                    b.HasKey("ID");

                    b.HasIndex("PizarraId");

                    b.ToTable("Estilos");
                });

            modelBuilder.Entity("TaskNote.Models.Pizarra", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TipoPizarra")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Pizarras");
                });

            modelBuilder.Entity("TaskNote.Models.Planner", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.ToTable("Planners");
                });

            modelBuilder.Entity("TaskNote.Models.Tarjeta", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comentarios");

                    b.Property<Guid>("ContenedorID");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("Estado");

                    b.Property<Guid?>("EstiloID");

                    b.Property<DateTime>("FechaFin");

                    b.Property<DateTime>("FechaInicio");

                    b.Property<string>("Titulo");

                    b.HasKey("ID");

                    b.HasIndex("ContenedorID");

                    b.HasIndex("EstiloID");

                    b.ToTable("Tarjetas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Tarjeta");
                });

            modelBuilder.Entity("TaskNote.Models.Usuario", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<DateTime>("Nacimiento");

                    b.Property<string>("NombreApellido");

                    b.Property<string>("NombreUsuario");

                    b.Property<string>("Password");

                    b.Property<Guid>("PizarraId");

                    b.Property<Guid?>("PlannerID");

                    b.HasKey("ID");

                    b.HasIndex("PizarraId");

                    b.HasIndex("PlannerID");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("TaskNote.Models.Educacion", b =>
                {
                    b.HasBaseType("TaskNote.Models.Tarjeta");

                    b.Property<Guid?>("AsignadoID");

                    b.Property<string>("Aula");

                    b.Property<string>("Establecimiento");

                    b.HasIndex("AsignadoID");

                    b.HasDiscriminator().HasValue("Educacion");
                });

            modelBuilder.Entity("TaskNote.Models.Empresa", b =>
                {
                    b.HasBaseType("TaskNote.Models.Tarjeta");

                    b.Property<Guid?>("AsignadoID")
                        .HasColumnName("Empresa_AsignadoID");

                    b.Property<string>("CentroDeCostos");

                    b.HasIndex("AsignadoID");

                    b.HasDiscriminator().HasValue("Empresa");
                });

            modelBuilder.Entity("TaskNote.Models.Personal", b =>
                {
                    b.HasBaseType("TaskNote.Models.Tarjeta");

                    b.HasDiscriminator().HasValue("Personal");
                });

            modelBuilder.Entity("TaskNote.Models.Contenedor", b =>
                {
                    b.HasOne("TaskNote.Models.Pizarra", "Pizarra")
                        .WithMany("Contenedor")
                        .HasForeignKey("PizarraId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TaskNote.Models.Estilo", b =>
                {
                    b.HasOne("TaskNote.Models.Pizarra", "Pizarra")
                        .WithMany("Estilos")
                        .HasForeignKey("PizarraId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TaskNote.Models.Tarjeta", b =>
                {
                    b.HasOne("TaskNote.Models.Contenedor", "Contenedor")
                        .WithMany("Tarjetas")
                        .HasForeignKey("ContenedorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TaskNote.Models.Estilo", "Estilo")
                        .WithMany()
                        .HasForeignKey("EstiloID");
                });

            modelBuilder.Entity("TaskNote.Models.Usuario", b =>
                {
                    b.HasOne("TaskNote.Models.Pizarra", "Pizarra")
                        .WithMany("Usuario")
                        .HasForeignKey("PizarraId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TaskNote.Models.Planner")
                        .WithMany("Usuario")
                        .HasForeignKey("PlannerID");
                });

            modelBuilder.Entity("TaskNote.Models.Educacion", b =>
                {
                    b.HasOne("TaskNote.Models.Usuario", "Asignado")
                        .WithMany()
                        .HasForeignKey("AsignadoID");
                });

            modelBuilder.Entity("TaskNote.Models.Empresa", b =>
                {
                    b.HasOne("TaskNote.Models.Usuario", "Asignado")
                        .WithMany()
                        .HasForeignKey("AsignadoID");
                });
#pragma warning restore 612, 618
        }
    }
}
