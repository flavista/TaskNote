// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskNote.Models;

namespace TaskNote.Migrations
{
    [DbContext(typeof(TaskNoteContext))]
    [Migration("20191029223018_Testing")]
    partial class Testing
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskNote.Models.Contenedor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("PizarraID");

                    b.Property<string>("nombre");

                    b.HasKey("ID");

                    b.HasIndex("PizarraID");

                    b.ToTable("Contenedors");
                });

            modelBuilder.Entity("TaskNote.Models.Estilo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("PizarraID");

                    b.Property<string>("fondo");

                    b.Property<string>("font");

                    b.Property<string>("theme");

                    b.HasKey("ID");

                    b.HasIndex("PizarraID");

                    b.ToTable("Estilos");
                });

            modelBuilder.Entity("TaskNote.Models.Pizarra", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TipoPizarra")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Pizarras");
                });

            modelBuilder.Entity("TaskNote.Models.Planner", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.ToTable("Planners");
                });

            modelBuilder.Entity("TaskNote.Models.Tarjeta", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ContenedorID");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("comentarios");

                    b.Property<int>("estado");

                    b.Property<Guid?>("estiloID");

                    b.Property<DateTime>("fechaFin");

                    b.Property<DateTime>("fechaInicio");

                    b.Property<string>("titulo");

                    b.HasKey("ID");

                    b.HasIndex("ContenedorID");

                    b.HasIndex("estiloID");

                    b.ToTable("Tarjetas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Tarjeta");
                });

            modelBuilder.Entity("TaskNote.Models.Usuario", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("PizarraID");

                    b.Property<Guid?>("PlannerID");

                    b.Property<string>("contrasenia");

                    b.Property<string>("email");

                    b.Property<int>("idUsuario");

                    b.Property<DateTime>("nacimiento");

                    b.Property<string>("nombreApellido");

                    b.Property<string>("nombreUsuario");

                    b.HasKey("ID");

                    b.HasIndex("PizarraID");

                    b.HasIndex("PlannerID");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("TaskNote.Models.Educacion", b =>
                {
                    b.HasBaseType("TaskNote.Models.Tarjeta");

                    b.Property<Guid?>("asignadoID");

                    b.Property<string>("aula");

                    b.Property<string>("establecimiento");

                    b.HasIndex("asignadoID");

                    b.HasDiscriminator().HasValue("Educacion");
                });

            modelBuilder.Entity("TaskNote.Models.Empresa", b =>
                {
                    b.HasBaseType("TaskNote.Models.Tarjeta");

                    b.Property<Guid?>("asignadoID")
                        .HasColumnName("Empresa_asignadoID");

                    b.Property<string>("centroDeCostos");

                    b.Property<string>("empresa");

                    b.HasIndex("asignadoID");

                    b.HasDiscriminator().HasValue("Empresa");
                });

            modelBuilder.Entity("TaskNote.Models.Personal", b =>
                {
                    b.HasBaseType("TaskNote.Models.Tarjeta");

                    b.HasDiscriminator().HasValue("Personal");
                });

            modelBuilder.Entity("TaskNote.Models.Contenedor", b =>
                {
                    b.HasOne("TaskNote.Models.Pizarra", "Pizarra")
                        .WithMany("Contenedor")
                        .HasForeignKey("PizarraID");
                });

            modelBuilder.Entity("TaskNote.Models.Estilo", b =>
                {
                    b.HasOne("TaskNote.Models.Pizarra", "Pizarra")
                        .WithMany("Estilos")
                        .HasForeignKey("PizarraID");
                });

            modelBuilder.Entity("TaskNote.Models.Tarjeta", b =>
                {
                    b.HasOne("TaskNote.Models.Contenedor")
                        .WithMany("Tarjetas")
                        .HasForeignKey("ContenedorID");

                    b.HasOne("TaskNote.Models.Estilo", "estilo")
                        .WithMany()
                        .HasForeignKey("estiloID");
                });

            modelBuilder.Entity("TaskNote.Models.Usuario", b =>
                {
                    b.HasOne("TaskNote.Models.Pizarra", "Pizarra")
                        .WithMany("Usuario")
                        .HasForeignKey("PizarraID");

                    b.HasOne("TaskNote.Models.Planner")
                        .WithMany("usuario")
                        .HasForeignKey("PlannerID");
                });

            modelBuilder.Entity("TaskNote.Models.Educacion", b =>
                {
                    b.HasOne("TaskNote.Models.Usuario", "asignado")
                        .WithMany()
                        .HasForeignKey("asignadoID");
                });

            modelBuilder.Entity("TaskNote.Models.Empresa", b =>
                {
                    b.HasOne("TaskNote.Models.Usuario", "asignado")
                        .WithMany()
                        .HasForeignKey("asignadoID");
                });
#pragma warning restore 612, 618
        }
    }
}
