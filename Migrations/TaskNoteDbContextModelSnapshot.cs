// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskNote.Models;

namespace TaskNote.Migrations
{
    [DbContext(typeof(TaskNoteDbContext))]
    partial class TaskNoteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskNote.Models.Contenedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre");

                    b.Property<Guid>("PizarraId");

                    b.HasKey("Id");

                    b.HasIndex("PizarraId");

                    b.ToTable("Contenedores");
                });

            modelBuilder.Entity("TaskNote.Models.Pizarra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Pizarras");
                });

            modelBuilder.Entity("TaskNote.Models.Planner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Planners");
                });

            modelBuilder.Entity("TaskNote.Models.Tarjeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ContenedorId");

                    b.Property<string>("Descripcion");

                    b.Property<DateTime>("FechaFin");

                    b.Property<DateTime>("FechaInicio");

                    b.Property<string>("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("ContenedorId");

                    b.ToTable("Tarjetas");
                });

            modelBuilder.Entity("TaskNote.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Apellido");

                    b.Property<string>("Email");

                    b.Property<DateTime>("FechaNacimiento");

                    b.Property<string>("Nombre");

                    b.Property<string>("NombreUsuario");

                    b.Property<string>("Password");

                    b.Property<Guid?>("PlannerId");

                    b.HasKey("Id");

                    b.HasIndex("PlannerId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("TaskNote.Models.UsuarioPizarra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Confirmado");

                    b.Property<int>("PizarraId");

                    b.Property<Guid?>("PizarraId1");

                    b.Property<Guid>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("PizarraId1");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuariosPizarra");
                });

            modelBuilder.Entity("TaskNote.Models.Contenedor", b =>
                {
                    b.HasOne("TaskNote.Models.Pizarra", "Pizarra")
                        .WithMany("Contenedores")
                        .HasForeignKey("PizarraId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TaskNote.Models.Tarjeta", b =>
                {
                    b.HasOne("TaskNote.Models.Contenedor", "Contenedor")
                        .WithMany("Tarjetas")
                        .HasForeignKey("ContenedorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TaskNote.Models.Usuario", b =>
                {
                    b.HasOne("TaskNote.Models.Planner")
                        .WithMany("Usuario")
                        .HasForeignKey("PlannerId");
                });

            modelBuilder.Entity("TaskNote.Models.UsuarioPizarra", b =>
                {
                    b.HasOne("TaskNote.Models.Pizarra", "Pizarra")
                        .WithMany("UsuariosPizarra")
                        .HasForeignKey("PizarraId1");

                    b.HasOne("TaskNote.Models.Usuario", "Usuario")
                        .WithMany("UsuariosPizarra")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
